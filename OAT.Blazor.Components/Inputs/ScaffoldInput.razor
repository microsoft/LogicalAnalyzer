@using System.Reflection;

<label for="constructorToUse">Constructor to Create:</label>
<select id="constructorToUse" @bind="constructorToInvoke">
    @{
        if (constructors != null)
        {
            @for (int i = 0; i < constructors.Count; i++)
            {
                <option value="@i">@constructors[i].ToString()</option>
            }
        }
    }
</select>
<br/>
@foreach (var parameter in Scaffold?.Parameters ?? new Dictionary<string, object?>())
{
    <label for="@parameter.Key">@parameter.Key</label>
    <PropertyInput Id="@parameter.Key" Object="@Object" SubPath="@PathFromKey(parameter.Key)" Type="@parameter.Value?.GetType()" />
}


@code {
    Scaffold? Scaffold
    {
        get
        {
            var obj = Helpers.GetValueByPropertyOrFieldName(Object, SubPath);
            return obj is Scaffold scaffold ? scaffold : null;
        }
        set
        {
            Helpers.SetValueByPropertyOrFieldName(Object, SubPath, value);
        }
    }

    int constructorToInvoke
    {
        get
        {
            return _constructorToInvoke;
        }
        set
        {
            _constructorToInvoke = value;
            if (constructors.Any())
            {
                Scaffold = new Scaffold(constructors[value]);
            }

        }
    }

    int _constructorToInvoke;

    List<ConstructorInfo> constructors
    {
        get
        {
            Console.WriteLine(Newtonsoft.Json.JsonConvert.SerializeObject(Scaffold?.Constructor.DeclaringType.GetConstructors().Where(x => Helpers.ConstructedOfBasicTypes(x)).ToList()));
            return Scaffold?.Constructor.DeclaringType.GetConstructors().Where(x => Helpers.ConstructedOfBasicTypes(x)).ToList() ?? new List<ConstructorInfo>();
        }
    }

    string PathFromKey(string key)
    {
        return $"{SubPath}.{key}";
    }

    [Parameter]
    public object? Object { get; set; }

    [Parameter]
    public string? SubPath { get; set; }
}
