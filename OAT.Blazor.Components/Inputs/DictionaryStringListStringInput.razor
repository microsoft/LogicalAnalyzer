@using Microsoft.CST.OAT.Utils;
@using Serilog;
<div class="row">
    <div class="col">
        <input class="form-control" id="@id" type="text" @bind="CurrentInputKey" />
    </div>
    <div class="col">
        <ListStringInput id="@SubPath" Object="@CurrentInputValue" SubPath="@string.Empty" />
    </div>
    <div class="col">
        <button class="btn-block" @onclick="AddEntry">Add @buttonText</button>
    </div>
</div>
@if (SubProperty.Count > 0)
{
    <div class="row">
        <div class="col">
            <select class="form-control" @bind="SelectedKey">
                @foreach (var key in SubProperty.Keys)
                {
                    <option value="@key">@key : @SubProperty[key]</option>
                }
            </select>
        </div>
        <div class="col-4">
            <button @onclick="RemoveEntry">Remove @buttonText</button>
        </div>
    </div>        
}

    @code {
        [Parameter]
        public object? Object { get; set; }

        [Parameter]
        public string? SubPath { get; set; }

        [Parameter]
        public string buttonText { get; set; } = "Dictionary Key And Value";

        [Parameter]
        public string id { get; set; } = string.Empty;

        string? SelectedKey { get; set; } = null;

        string CurrentInputKey { get; set; } = string.Empty;

        List<string> CurrentInputValue { get; set; } = new List<string>();

        void RemoveEntry()
        {
            if (SelectedKey is not null){
                SubProperty.Remove(SelectedKey);
            }
        }

        void AddEntry()
        {
            SubProperty[CurrentInputKey] = CurrentInputValue;
        }

        public Dictionary<string, List<String>> SubProperty
        {
            get
            {
                return (Dictionary<string, List<string>>)(Helpers.GetValueByPropertyOrFieldName(Object, SubPath) ?? new Dictionary<string, List<string>>());
            }
            set
            {
                Helpers.SetValueByPropertyOrFieldName(Object, SubPath, value);
            }
        }
    }
