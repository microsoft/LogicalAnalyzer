@page "/sandbox"
@using System.Reflection.Metadata;
@using Microsoft.CodeAnalysis;
@using System.Reflection;
@using System.Diagnostics;
@using System.IO;
@using Tewr.Blazor.FileReader;
@using Newtonsoft.Json;
@using Newtonsoft.Json.Linq;

@inject NavigationManager NavigationManager;
@inject AppState AppState;
@inject IFileReaderService fileReaderService;
@inject IJSRuntime JSRuntime

<h2>Assembly</h2>
<p>Choose Assembly to use objects.</p>
<input type="file" @ref=inputElement />
<button @onclick=ReadFile class="btn btn-primary">Read file</button>
<button @onclick=ClearFile class="btn btn-primary">Clear Assemblies</button>
<button @onclick=CancelFile disabled=@IsAssemblyCancelDisabled class="btn btn-primary">Cancel</button>
<br />
<progress max="@max" value="@value" />
<br />

@if (AppState.Assemblies.Any())
{
<h2>State</h2>
<p>Load in JSON serialized Sandbox State.</p>
<input type="file" @ref=jsonInput />
<button @onclick=ReadJson class="btn btn-primary">Read Sandbox State</button>
<button @onclick=CancelJson disabled=@IsCancelDisabled class="btn btn-primary">Cancel</button>
<br />
<progress max="@maxJson" value="@valueJson" />
<br />

<button @onclick="SaveSandboxState">Save Sandbox State</button>
@foreach(var error in SandBoxErrors)
{
    <p>Error: @error</p>
}
<h3>Settings</h3>
    <label for="namespaceInput">Namespace To Search:</label>
    <select id="namespaceInput" @bind="nameSpace">
        @foreach (var names in GetNamespaces())
        {
            <option value="@names">@names</option>
        }
    </select>
    <br />
    <label for="typeToCreate">Type to Create:</label>
    <select id="typeToCreate" @bind="typeToInvoke">
        @foreach(var type in Types.Keys)
        {
            <option value="@type.FullName">@type.FullName</option>
        }
    </select>
    <label for="constructorToUse">Constructor to Create:</label>
    <select id="constructorToUse" @bind="constructorToInvoke">
        @{
            var constructors = Types.Where(x => x.Key.FullName == typeToInvoke).FirstOrDefault().Value;
            if (constructors != null)
            {
                @for (int i = 0; i < constructors.Count; i++)
                {
                    <option value="@i">@constructors[i].ToString()</option>
                }
            }
        }
    </select>
<br />
@if (Parameters.Any())
{
    Parameters.Clear();
}
@foreach(var parameter in constructors?[constructorToInvoke].GetParameters() ?? Array.Empty<ParameterInfo>())
{
    Parameters.Add(parameter.Name, parameter.DefaultValue);
    <label for="@parameter.Name">@parameter.Name</label>
    <PropertyInput Id="@parameter.Name" Object="@Parameters" SubPath="@parameter.Name" Type="@parameter.ParameterType" />
}

<br />

// Add / bind variable here
<div class="alert alert-warning" role="alert">

</div>

@if (@Types.Any())
{
    var types = Types.Where(x => x.Key.FullName == typeToInvoke);
    if (types.Any())
    {
        var type = types.FirstOrDefault();
        var constructor = type.Value[constructorToInvoke];
        <button @onclick="AddObject">Add @type.Key.FullName</button>
    }
}
<button @onclick="RemoveLastObject" disabled=@removeDisabled>Remove Last Object</button><button @onclick="RefreshState">Re-Run Rules</button>
<br />
@for (int i = 0; i < AppState.TestObjects.Count; i++)
{
    var results = analyzer.Analyze(AppState.Rules, AppState.TestObjects[i]);
    <div class="card">
        <span>@results.Count() rules applied.</span>
        <br />
        @foreach (var result in results)
        {
            <b>@result.Name</b>
            <br />
        }
        <br />
        <ObjectInput id="@i.ToString()" Object="@AppState.TestObjects[i]" Collapsable="true" />
    </div>
}
}
else
{
    <p>Load an Assembly to use the Sandbox.</p>
}
@code {
    public long max;
    public long value;
    ElementReference inputElement;

    public System.Threading.CancellationTokenSource? cancellationTokenSource;
    string Output { get; set; } = string.Empty;

    public bool CanCancel { get; set; }
    public bool IsCancelDisabled => !CanCancel;

    public async Task ClearFile()
    {
        AppState.Assemblies.Clear();
        await fileReaderService.CreateReference(inputElement).ClearValue();
    }

    public async Task ReadFile()
    {
        AppState.Assemblies.Clear();
        max = 0;
        value = 0;
        Output = string.Empty;
        this.StateHasChanged();
        var files = await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync();
        foreach (var file in files)
        {
            var fileInfo = await file.ReadFileInfoAsync();
            max = fileInfo.Size;

            var stopwatch = new Stopwatch();
            stopwatch.Start();
            Output += $"Reading file..." + nl;
            this.StateHasChanged();
            cancellationTokenSource?.Dispose();
            cancellationTokenSource = new System.Threading.CancellationTokenSource();
            CanCancel = true;

            const int onlyReportProgressAfterThisPercentDelta = 10;

            // Subscribe to progress (change of position)
            fileInfo.PositionInfo.PositionChanged += (s, e) =>
            {
                // (optional) Only report progress in console / progress bar if percentage has moved over 10% since last call to Acknowledge()
                if (e.PercentageDeltaSinceAcknowledge > onlyReportProgressAfterThisPercentDelta)
                {
                    stopwatch.Stop();
                    Output += $"Read {(e.PositionDeltaSinceAcknowledge)} bytes ({e.Percentage:00}%). {e.Position} / {fileInfo.Size}{nl}";
                    this.InvokeAsync(this.StateHasChanged);
                    e.Acknowledge();
                    value = e.Position;
                    stopwatch.Start();
                }
            };

            try
            {
                using var stream = await file.OpenReadAsync();
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var assembly = Assembly.Load(ms.ToArray());
                if (assembly != null)
                {
                    AppState.Assemblies.Add(assembly);
                    await this.InvokeAsync(this.StateHasChanged);
                }
                else
                {
                    Console.WriteLine("Assembly is null");
                }
            }
            catch (OperationCanceledException)
            {
                Output += $"Operation was cancelled";
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1);
            }
            catch (Exception e)
            {
                var message = e.Message;
                var stackTrace = e.StackTrace;
                var type = e.GetType();
                var name = type.Name;
                type = e.GetType();
                Output += $"{name}: {message} ({type}:{stackTrace})";
            }
            finally
            {
                CanCancel = false;
            }

            value = max;
            Output += $"Done reading file {fileInfo.Name} - {fileInfo.Size} bytes in {stopwatch.ElapsedMilliseconds}ms.{nl}.";
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task CancelFile()
    {
        Output += $"Cancel requested.{nl}";
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
        cancellationTokenSource?.Cancel();
    }

    Analyzer analyzer = new Analyzer(new AnalyzerOptions(true));

    List<string> SandBoxErrors = new List<string>();

    Dictionary<string, object> values = new Dictionary<string, object>();

    int constructorToInvoke
    {
        get
        {
            return _constructorToInvoke;
        }
        set
        {
            _constructorToInvoke = value;
            RefreshState();
        }
    }

    string typeToInvoke
    {
        get
        {
            return _typeToInvoke;
        }
        set
        {
            _typeToInvoke = value;
            RefreshState();
        }
    }

    string _typeToInvoke = string.Empty;

    public bool removeDisabled => AppState.TestObjects.Count == 0;

    int _constructorToInvoke;

    string nameSpace
    {
        get {
            return _nameSpace;
        } set {
            _nameSpace = value;
            UpdateTypes();
        }
    }

    string _nameSpace = string.Empty;

    void UpdateTypes()
    {
        var types = AppState.Assemblies.SelectMany(x => Helpers.GetTypesInNamespace(x, nameSpace));
        var results = new Dictionary<Type, List<ConstructorInfo>>();
        foreach (var type in types)
        {
            try
            {
                var allowedConstructors = new List<ConstructorInfo>();
                var constructors = type.GetConstructors(BindingFlags.Instance | BindingFlags.Public);
                foreach (var constructorItr in constructors)
                {
                    foreach (var parameter in constructorItr.GetParameters())
                    {
                        if (!Helpers.IsBasicType(parameter.ParameterType))
                        {
                            break;
                        }
                    }
                    allowedConstructors.Add(constructorItr);
                }
                if (allowedConstructors.Any())
                {
                    results.Add(type, allowedConstructors);
                }
            }
            catch(Exception)
            {
                // Skip this constructor, we can't make it work.
                //Console.WriteLine($"Failed to get constructor:{e.Message}");
            }
        }
        Types = results;
        RefreshState();
    }

    Dictionary<Type, List<ConstructorInfo>> Types { get; set; } = new Dictionary<Type, List<ConstructorInfo>>();

    protected override async Task OnInitializedAsync()
    {
        analyzer.SetOperation(new Microsoft.CST.OAT.VehicleDemo.OverweightOperation(analyzer));
        var results = analyzer.Analyze(AppState.Rules);
        UpdateTypes();
        await base.OnInitializedAsync();
    }

    void RefreshState()
    {
        this.StateHasChanged();
    }

    void RemoveLastObject()
    {
        if (AppState.TestObjects.Count > 0)
        {
            AppState.TestObjects.RemoveAt(AppState.TestObjects.Count - 1);
        }
    }

    Dictionary<string,object> Parameters = new Dictionary<string, object>();

    void AddObject()
    {
        var type = Types.Where(x => x.Key.FullName == typeToInvoke).FirstOrDefault();
        var constructor = type.Value[constructorToInvoke];
        try
        {
            var inputs = new List<object>();
            foreach(var parameter in constructor.GetParameters())
            {
                inputs.Add(Parameters[parameter.Name]);
            }
            AppState.TestObjects.Add(constructor.Invoke(inputs.ToArray()));
        }
        catch(Exception e)
        {
            Console.WriteLine($"Failed to construct object.  This likely is due to an external assembly reference.  This PWA currently only supports types which are fully defined within the provided assembly. ({e.Message})");
        }
    }
    private static string nl = Environment.NewLine;
    public long maxJson;
    public long valueJson;
    ElementReference jsonInput;
    public System.Threading.CancellationTokenSource? cancellationTokenSourceAssemblyLoader;

    public bool IsAssemblyCancelDisabled => !CanCancel;

    IEnumerable<string> GetNamespaces(Assembly? assembly = null)
    {
        if (assembly is null)
        {
            var types = new List<Type>();
            foreach(var appStateAssembly in AppState.Assemblies)
            {
                try
                {
                    types.AddRange(appStateAssembly.GetTypes());
                }
                catch(ReflectionTypeLoadException e)
                {
                    types.AddRange(e.Types.Where(x => x is Type));
                    foreach(var ex in e.LoaderExceptions)
                    {
                        //Debug.WriteLine(e.Message);
                    }
                }
            }
            return types.Select(x => x.Namespace).Distinct();
        }
        else
        {
            var types = new List<Type>();
            try
            {
                types.AddRange(assembly.GetTypes());
            }
            catch (ReflectionTypeLoadException e)
            {
                types.AddRange(e.Types.Where(x => x is Type));
                foreach (var ex in e.LoaderExceptions)
                {
                    //Debug.WriteLine(e.Message);
                }
            }
            return types.Select(x => x.Namespace).Distinct();
        }
    }

    public async Task ReadJson()
    {
        AppState.Rules.Clear();
        maxJson = 0;
        valueJson = 0;
        Output = string.Empty;
        this.StateHasChanged();
        var files = await fileReaderService.CreateReference(jsonInput).EnumerateFilesAsync();
        foreach (var file in files)
        {
            var fileInfo = await file.ReadFileInfoAsync();
            maxJson = fileInfo.Size;

            var stopwatch = new Stopwatch();
            stopwatch.Start();
            Output += $"Reading file..." + nl;
            this.StateHasChanged();
            cancellationTokenSourceAssemblyLoader?.Dispose();
            cancellationTokenSourceAssemblyLoader = new System.Threading.CancellationTokenSource();
            CanCancel = true;

            const int onlyReportProgressAfterThisPercentDelta = 10;

            // Subscribe to progress (change of position)
            fileInfo.PositionInfo.PositionChanged += (s, e) =>
            {
                // (optional) Only report progress in console / progress bar if percentage has moved over 10% since last call to Acknowledge()
                if (e.PercentageDeltaSinceAcknowledge > onlyReportProgressAfterThisPercentDelta)
                {
                    stopwatch.Stop();
                    Output += $"Read {(e.PositionDeltaSinceAcknowledge)} bytes ({e.Percentage:00}%). {e.Position} / {fileInfo.Size}{nl}";
                    this.InvokeAsync(this.StateHasChanged);
                    e.Acknowledge();
                    valueJson = e.Position;
                    stopwatch.Start();
                }
            };

            try
            {
                SandBoxErrors.Clear();
                using var stream = await file.OpenReadAsync();
                using var sr = new StreamReader(stream);
                JObject sandboxState = JObject.Parse(await sr.ReadToEndAsync());
                var failed = false;
                foreach (var assembly in sandboxState["AssemblyNames"].Select(x => (string?)x ?? string.Empty))
                {
                    if (!AppState.Assemblies.Any(x => x.GetName().Name == assembly))
                    {
                        failed = true;
                        Console.WriteLine("Assembly {0} isn't loaded.", assembly);
                        SandBoxErrors.Add($"Assembly {assembly} isn't loaded.");
                        break;
                    }
                }
                if (!failed)
                {
                    if (sandboxState["Objects"] is JObject sandBoxObjects)
                    {
                        foreach (var objectType in sandBoxObjects.Properties().Select(x => x.Name).ToList())
                        {
                            var types = new List<Type>();
                            foreach (var assembly in AppState.Assemblies)
                            {
                                foreach (var nameSpace in GetNamespaces(assembly))
                                {
                                    types.AddRange(Helpers.GetTypesInNamespace(assembly, nameSpace));
                                }
                            }
                            var results = new List<Type>();
                            foreach (var typed in types)
                            {
                                var constructor = typed.GetConstructor(Type.EmptyTypes);
                                if (constructor != null)
                                {
                                    results.Add(typed);
                                }
                            }
                            var type = results.Where(x => x.FullName == objectType).FirstOrDefault();
                            if (type != null)
                            {
                                if (sandboxState["Objects"]?[objectType] is JArray jArray)
                                {
                                    foreach (var objState in jArray)
                                    {
                                        var empty = System.Activator.CreateInstance(type);
                                        foreach (var prop in Helpers.GetAllNestedFieldsAndPropertiesMemberInfo(type))
                                        {
                                            var obj = objState;
                                            foreach (var split in prop.Path.Split('.'))
                                            {
                                                obj = obj?[split];
                                            }
                                            var stringRepresentation = obj.ToObject<string>();
                                            if (stringRepresentation is string representation)
                                            {
                                                if (prop.MemInfo is PropertyInfo propInfo)
                                                {
                                                    object? value = GetValueFromJObject(propInfo.PropertyType, representation);
                                                    Helpers.SetValueByPropertyOrFieldName(empty, prop.Path, value);
                                                }
                                                if (prop.MemInfo is FieldInfo fieldInfo)
                                                {
                                                    object? value = GetValueFromJObject(fieldInfo.FieldType, representation);
                                                    Helpers.SetValueByPropertyOrFieldName(empty, prop.Path, value);
                                                }

                                            }
                                        }
                                        AppState.TestObjects.Add(empty);
                                    }

                                }
                            }
                            else
                            {
                                failed = true;
                                SandBoxErrors.Add($"Type {objectType} isn't loaded and won't be loaded.");
                            }
                        }

                    }
                }
            }
            catch (OperationCanceledException)
            {
                Output += $"Operation was cancelled";
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1);
            }
            catch (Exception e)
            {
                var message = e.Message;
                var stackTrace = e.StackTrace;
                var type = e.GetType();
                var name = type.Name;
                type = e.GetType();
                Console.WriteLine($"{name}: {message} ({type}:{stackTrace})");
                Output += $"{name}: {message} ({type}:{stackTrace})";
            }
            finally
            {
                CanCancel = false;
            }

            valueJson = maxJson;
            Output += $"Done reading file {fileInfo.Name} - {fileInfo.Size} bytes in {stopwatch.ElapsedMilliseconds}ms.{nl}.";
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task CancelJson()
    {
        Output += $"Cancel requested.{nl}";
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
        cancellationTokenSource?.Cancel();
    }

    object? GetValueFromJObject(Type type, string objectState)
    {
        if (type == typeof(int))
        {
            if (int.TryParse(objectState, out int intVal))
            {
                return intVal;
            }
        }
        else if (type == typeof(string))
        {
            return objectState;
        }
        else if (type == typeof(char))
        {
            return objectState[0];
        }
        else if (type == typeof(long))
        {
            if (long.TryParse(objectState, out long longVal))
            {
                return longVal;
            }
        }
        else if (type == typeof(float))
        {
            if (float.TryParse(objectState, out float floatVal))
            {
                return floatVal;
            }
        }
        else if (type == typeof(double))
        {
            if (double.TryParse(objectState, out double doubleVal))
            {
                return doubleVal;
            }
        }
        else if (type == typeof(decimal))
        {
            if (decimal.TryParse(objectState, out decimal decimalVal))
            {
                return decimalVal;
            }
        }
        else if (type == typeof(bool))
        {
            if (bool.TryParse(objectState, out bool boolVal))
            {
                return boolVal;
            }
        }
        else if (type == typeof(uint))
        {
            if (uint.TryParse(objectState, out uint uintVal))
            {
                return uintVal;
            }
        }
        else if (type == typeof(ulong))
        {
            if (ulong.TryParse(objectState, out ulong ulongVal))
            {
                return ulongVal;
            }
        }
        else if (type == typeof(short))
        {
            if (short.TryParse(objectState, out short shortVal))
            {
                return shortVal;
            }
        }
        else if (type == typeof(ushort))
        {
            if (ushort.TryParse(objectState, out ushort ushortVal))
            {
                return ushortVal;
            }
        }
        else if (type == typeof(DateTime))
        {
            if (DateTime.TryParse(objectState, out DateTime dateTimeVal))
            {
                return dateTimeVal;
            }
        }
        else if (type.IsEnum)
        {
            if (Enum.TryParse(type, objectState, out object result))
            {
                return Convert.ChangeType(result,type);
            }
        }
        return null;
    }

    public async Task SaveSandboxState()
    {
        var objects = new Dictionary<string, List<object>>();
        foreach(var obj in AppState.TestObjects)
        {
            var t = obj.GetType();
            if (!objects.ContainsKey(t.FullName))
            {
                objects.Add(t.FullName, new List<object>());
            }
            objects[t.FullName].Add(obj);
        }
        var state = new SandboxState(AppState.Assemblies.Select(x => x.GetName().Name).ToList(), objects);
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs",
            "SandboxState.json",
            "data:text/plain;charset=utf-8,",
            Newtonsoft.Json.JsonConvert.SerializeObject(state)
        );
    }
}
