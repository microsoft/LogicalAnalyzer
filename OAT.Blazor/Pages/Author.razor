@page "/author"
@using System.Reflection.Metadata;
@using Microsoft.CodeAnalysis;
@using System.Reflection;
@using Microsoft.CST.OAT.VehicleDemo;
@using System.IO;
@using Tewr.Blazor.FileReader;
@using System.Runtime.Loader;
@using System.Diagnostics;
@inject Microsoft.CST.OAT.Blazor.AppState AppState;
@inject IFileReaderService fileReaderService;
@inject IJSRuntime JSRuntime

<h2>Assembly</h2>
<p>Choose Assembly to use for file types (optional).</p>
<input type="file" @ref=inputElement />
<button @onclick=ReadFile class="btn btn-primary">Read file</button>
<button @onclick=ClearFile class="btn btn-primary">Clear Assemblies</button>
<button @onclick=CancelFile disabled=@IsCancelDisabled class="btn btn-primary">Cancel</button>
<br />
<progress max="@max" value="@value" />
<br />
<h2>Rules</h2>
<p>Load in JSON serialized rules.</p>
<input type="file" @ref=jsonInput />
<button @onclick=ReadJson class="btn btn-primary">Read file</button>
<button @onclick=CancelJson disabled=@IsCancelDisabled class="btn btn-primary">Cancel</button>
<br />
<progress max="@maxJson" value="@valueJson" />
<br />
@if (AppState.Assemblies.Any())
{
    <label for="namespaceInput">Namespace To Search:</label>
    <select id="namespaceInput" @bind="nameSpace">
        @foreach (var names in GetNamespaces())
        {
            <option value="@names">@names</option>
        }
    </select>
}
<br />
<button @onclick="AddRule">Add Rule</button>
<button @onclick="RemoveLastRule" disabled=@removeDisabled>Remove Last Rule</button>
<button @onclick="ValidateRules">Validate Rules</button>
<button @onclick="DownloadRules">Export Rules to JSON</button>
<br />
@foreach (var rule in AppState.Rules)
{
    <div class="card">
        @if (issues.ContainsKey(rule))
        {
            @foreach (var problem in issues[rule])
            {
                <div class="problem">
                    <span class="oi oi-warning"></span>
                    @problem.Description
                </div>
            }
            @if (issues[rule].Count() > 0)
            {
                <br />
            }
        }
        else
        {
            <p>Processing Issues for Rule...</p>
        }

        <RuleInput Rule="rule" CollapsedState="ComponentCollapsedState.Collapsed" Types="GetTypes()" />
    </div>
}
@code
{
    private static string nl = Environment.NewLine;
    [Parameter]
    public int BufferSize { get; set; } = 20480;
    public long max;
    public long value;
    ElementReference inputElement;

    public bool removeDisabled => AppState.Rules.Count == 0;

    public long maxJson;
    public long valueJson;
    ElementReference jsonInput;

    public System.Threading.CancellationTokenSource? cancellationTokenSource;
    string Output { get; set; } = string.Empty;

    public bool CanCancel { get; set; }
    public bool IsCancelDisabled => !CanCancel;

    public async Task ClearFile()
    {
        AppState.Assemblies.Clear();
        await fileReaderService.CreateReference(inputElement).ClearValue();
    }

    public async void DownloadRules()
    {
        await JSRuntime.InvokeAsync<object>(
            "FileSaveAs",
            "OAT-Rules.json",
            "data:text/plain;charset=utf-8,",
            Newtonsoft.Json.JsonConvert.SerializeObject(AppState.Rules)
        );
    }

    public async Task ReadFile()
    {
        AppState.Assemblies.Clear();
        max = 0;
        value = 0;
        Output = string.Empty;
        this.StateHasChanged();
        var files = await fileReaderService.CreateReference(inputElement).EnumerateFilesAsync();
        foreach (var file in files)
        {
            var fileInfo = await file.ReadFileInfoAsync();
            max = fileInfo.Size;

            var stopwatch = new Stopwatch();
            stopwatch.Start();
            Output += $"Reading file..." + nl;
            this.StateHasChanged();
            Console.WriteLine(Output);
            cancellationTokenSource?.Dispose();
            cancellationTokenSource = new System.Threading.CancellationTokenSource();
            CanCancel = true;

            const int onlyReportProgressAfterThisPercentDelta = 10;

            // Subscribe to progress (change of position)
            fileInfo.PositionInfo.PositionChanged += (s, e) =>
            {
                // (optional) Only report progress in console / progress bar if percentage has moved over 10% since last call to Acknowledge()
                if (e.PercentageDeltaSinceAcknowledge > onlyReportProgressAfterThisPercentDelta)
                {
                    stopwatch.Stop();
                    Output += $"Read {(e.PositionDeltaSinceAcknowledge)} bytes ({e.Percentage:00}%). {e.Position} / {fileInfo.Size}{nl}";
                    this.InvokeAsync(this.StateHasChanged);
                    e.Acknowledge();
                    value = e.Position;
                    stopwatch.Start();
                }
            };

            try
            {
                using var stream = await file.OpenReadAsync();
                using var ms = new MemoryStream();
                await stream.CopyToAsync(ms);
                var assembly = Assembly.Load(ms.ToArray());
                if (assembly != null)
                {
                    AppState.Assemblies.Add(assembly);
                    await this.InvokeAsync(this.StateHasChanged);
                }
                else
                {
                    Console.WriteLine("Assembly is null");
                }
            }
            catch (OperationCanceledException)
            {
                Output += $"Operation was cancelled";
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1);
            }
            catch (Exception e)
            {
                var message = e.Message;
                var stackTrace = e.StackTrace;
                var type = e.GetType();
                var name = type.Name;
                type = e.GetType();
                Output += $"{name}: {message} ({type}:{stackTrace})";
            }
            finally
            {
                CanCancel = false;
            }

            value = max;
            Output += $"Done reading file {fileInfo.Name} - {fileInfo.Size} bytes in {stopwatch.ElapsedMilliseconds}ms.{nl}.";
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task CancelFile()
    {
        Output += $"Cancel requested.{nl}";
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
        cancellationTokenSource?.Cancel();
    }

    public async Task ReadJson()
    {
        AppState.Rules.Clear();
        maxJson = 0;
        valueJson = 0;
        Output = string.Empty;
        this.StateHasChanged();
        var files = await fileReaderService.CreateReference(jsonInput).EnumerateFilesAsync();
        foreach (var file in files)
        {
            var fileInfo = await file.ReadFileInfoAsync();
            maxJson = fileInfo.Size;

            var stopwatch = new Stopwatch();
            stopwatch.Start();
            Output += $"Reading file..." + nl;
            this.StateHasChanged();
            Console.WriteLine(Output);
            cancellationTokenSource?.Dispose();
            cancellationTokenSource = new System.Threading.CancellationTokenSource();
            CanCancel = true;

            const int onlyReportProgressAfterThisPercentDelta = 10;

            // Subscribe to progress (change of position)
            fileInfo.PositionInfo.PositionChanged += (s, e) =>
            {
                // (optional) Only report progress in console / progress bar if percentage has moved over 10% since last call to Acknowledge()
                if (e.PercentageDeltaSinceAcknowledge > onlyReportProgressAfterThisPercentDelta)
                {
                    stopwatch.Stop();
                    Output += $"Read {(e.PositionDeltaSinceAcknowledge)} bytes ({e.Percentage:00}%). {e.Position} / {fileInfo.Size}{nl}";
                    this.InvokeAsync(this.StateHasChanged);
                    e.Acknowledge();
                    valueJson = e.Position;
                    stopwatch.Start();
                }
            };

            try
            {
                using var stream = await file.OpenReadAsync();
                using var sr = new StreamReader(stream);
                AppState.Rules = Newtonsoft.Json.JsonConvert.DeserializeObject<List<Rule>>(await sr.ReadToEndAsync());
            }
            catch (OperationCanceledException)
            {
                Output += $"Operation was cancelled";
                await InvokeAsync(StateHasChanged);
                await Task.Delay(1);
            }
            catch (Exception e)
            {
                var message = e.Message;
                var stackTrace = e.StackTrace;
                var type = e.GetType();
                var name = type.Name;
                type = e.GetType();
                Output += $"{name}: {message} ({type}:{stackTrace})";
            }
            finally
            {
                CanCancel = false;
            }

            valueJson = maxJson;
            Output += $"Done reading file {fileInfo.Name} - {fileInfo.Size} bytes in {stopwatch.ElapsedMilliseconds}ms.{nl}.";
            ValidateRules();
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task CancelJson()
    {
        Output += $"Cancel requested.{nl}";
        await InvokeAsync(StateHasChanged);
        await Task.Delay(1);
        cancellationTokenSource?.Cancel();
    }

    string nameSpace = string.Empty;

    Type[] GetTypes()
    {
        return AppState.Assemblies.SelectMany(x => Helpers.GetTypesInNamespace(x, nameSpace)).ToArray();
    }

    Analyzer analyzer = new Analyzer(new AnalyzerOptions(true));

    protected override void OnInitialized()
    {
        Strings.Setup();
        ValidateRules();
        base.OnInitialized();
    }

    Dictionary<Rule, IEnumerable<Violation>> issues = new Dictionary<Rule, IEnumerable<Violation>>();

    void ValidateRules()
    {
        foreach (var rule in AppState.Rules)
        {
            issues[rule] = analyzer.EnumerateRuleIssues(rule);
        }
    }

    void RemoveLastRule()
    {
        if (AppState.Rules.Count > 0)
        {
            AppState.Rules.RemoveAt(AppState.Rules.Count - 1);
        }
        ValidateRules();
    }

    void AddRule()
    {
        AppState.Rules.Add(new Rule("Rule Name Here"));
        ValidateRules();
    }

    IEnumerable<string> GetNamespaces(Assembly? assembly = null)
    {
        if (assembly is null)
        {
            var types = new List<Type>();
            foreach (var appStateAssembly in AppState.Assemblies)
            {
                try
                {
                    types.AddRange(appStateAssembly.GetTypes());
                }
                catch (ReflectionTypeLoadException e)
                {
                    types.AddRange(e.Types.Where(x => x is Type));
                    foreach (var ex in e.LoaderExceptions)
                    {
                        Console.WriteLine(e.Message);
                    }
                }
            }
            return types.Select(x => x.Namespace).Distinct();
        }
        else
        {
            var types = new List<Type>();
            try
            {
                types.AddRange(assembly.GetTypes());
            }
            catch (ReflectionTypeLoadException e)
            {
                types.AddRange(e.Types.Where(x => x is Type));
                foreach (var ex in e.LoaderExceptions)
                {
                    Console.WriteLine(e.Message);
                }
            }
            return types.Select(x => x.Namespace).Distinct();
        }
    }
}